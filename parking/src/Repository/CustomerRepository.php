<?php
/*
 *
 * (c) Nicolas Cuevas <nicolasgcuevas@gmail.com>
 *
 */

namespace AppParking\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use AppParking\Entity\Customer;
use AppParking\Repository\Reusable\AttributesTrait;
use Exception;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends \Doctrine\ORM\EntityRepository
{
    use AttributesTrait;

    public function findById($id, $returnArray = TRUE)
    {   
        $result = NULL;
        $dql = "SELECT u  FROM AppParking\Entity\Customer u ".
               "WHERE u.id = '".$id."'";
        try{
            if($returnArray){
                $result = $this->getEntityManager()->createQuery($dql)->getArrayResult();
            }else{
                $result = $this->getEntityManager()->createQuery($dql)->getSingleResult();
            }
            
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function findAllObjects($queryFilters)
    {   
        $result = NULL;
        $page = $queryFilters['page'];
        $limit = $queryFilters['limit'];
        $where = $queryFilters['where'];
        $orderBy = $queryFilters['orderBy'];

        $qb = $this->getEntityManager()->createQueryBuilder();
        try{
            $qb->select(array('u'))
               ->from('AppParking\Entity\Customer', 'u')
               ->setFirstResult( ($limit * ($page)) )
               ->setMaxResults( $limit );

            if($where){
                foreach ($where['filters'] as $value) {
                    if(isset($value['type']) && $value['type'] == 'eq'){
                        $qb->andWhere($qb->expr()->eq($value['field'],$value['value']));
                    }elseif(isset($value['type']) && $value['type'] == 'or'){
                        $qb->orWhere($value['field']." = ".$value['value']);
                    }else{
                        $qb->andWhere($value['field']." LIKE '%".$value['value']."%'");
                    }
                }
            }

            if($orderBy){
                $qb->add('orderBy', $orderBy['field'].' '.$orderBy['type']);
            }

            $query = $qb->getQuery();
            $result['items'] = $query->getArrayResult();
            $pagination = $this->getPagination($query, $page, $limit);
            $result['pagination'] = $pagination;
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function create($data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            $obj = new Customer();
            /*$obj->setName($data['name']);
            $obj->setDescription($data['description']);
            $obj->setShortName($data['shortName']);
            $obj->setSymbol($data['symbol']);*/
            $em->persist($obj);
            $em->flush();
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function update($id, $data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            $obj = $this->findById($id,FALSE);
            if(is_object($obj)){
                /*if(isset($data['name'])){
                    $obj->setName($data['name']);
                }
                if(isset($data['description'])){
                    $obj->setDescription($data['description']);
                }
                if(isset($data['shortName'])){
                    $obj->setShortName($data['shortName']);
                }
                if(isset($data['symbol'])){
                    $obj->setSymbol($data['symbol']);
                }*/
                $em->persist($obj);
                $em->flush();
            }
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }
}
