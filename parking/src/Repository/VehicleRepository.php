<?php
/*
 *
 * (c) Nicolas Cuevas <nicolasgcuevas@gmail.com>
 *
 */

namespace AppParking\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use AppParking\Entity\Vehicle;
use AppParking\Entity\Customer;
use AppParking\Repository\Reusable\AttributesTrait;
use Exception;

/**
 * VehicleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VehicleRepository extends \Doctrine\ORM\EntityRepository
{
    use AttributesTrait;

    public function findById($id, $returnArray = TRUE)
    {   
        $result = NULL;
        $dql = "SELECT u, c, b, vt  FROM AppParking\Entity\Vehicle u ".
                "JOIN u.customer c ".
                "JOIN u.brand b ".
                "JOIN u.vehicleType vt ".
                "WHERE u.id = '".$id."'";
        try{
            if($returnArray){
                $result = $this->getEntityManager()->createQuery($dql)->getArrayResult();
            }else{
                $result = $this->getEntityManager()->createQuery($dql)->getSingleResult();
            }
            
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function findAllObjects($queryFilters)
    {   
        $result = NULL;
        $page = $queryFilters['page'];
        $limit = $queryFilters['limit'];
        $where = $queryFilters['where'];
        $orderBy = $queryFilters['orderBy'];

        $qb = $this->getEntityManager()->createQueryBuilder();
        try{
            $qb->select(array('u','s','b','vt'))
               ->from('AppParking\Entity\Vehicle', 'u')
               ->join('u.customer', 's')
               ->join('u.brand', 'b')
               ->join('u.vehicleType', 'vt')
               ->setFirstResult( ($limit * ($page)) )
               ->setMaxResults( $limit );

            if($where){
                $qb->add('where','u.'.$where['field']." LIKE '%".$where['value']."%'");
            }

            if($orderBy){
                $qb->add('orderBy','u.'.$orderBy['field'].' '.$orderBy['type']);
            }

            $query = $qb->getQuery();
            $result['items'] = $query->getArrayResult();
            $pagination = $this->getPagination($query, $page, $limit);
            $result['pagination'] = $pagination;
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function create($data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            $checkIfVehicleExists = $em->getRepository('AppParking\Entity\Vehicle')
                               ->findOneBy(['plate'=>$data['plate']]);
            $brand = $em->find('AppParking\Entity\Brand',$data['brand']);
            $type = $em->find('AppParking\Entity\VehicleType',$data['vehicleType']);
            if(!$checkIfVehicleExists){
                $customer = new Customer();
                $customer->setFirstName($data['firstName']);
                $customer->setLastName($data['lastName']);
                $customer->setPhoneNumber($data['phoneNumber']);
                $em->persist($customer);

                $vehicle = new Vehicle();
                $vehicle->setPlate($data['plate']);
                $vehicle->setColor($data['color']);
                $em->persist($vehicle);

                $customer->addVehicle($vehicle);
                $em->persist($customer);
                $brand->addVehicle($vehicle);
                $em->persist($brand);
                $type->addVehicle($vehicle);
                $em->persist($type);
                $em->flush();
            }else{
               throw new Exception("Vehicle already exist");
            }
            
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function update($id, $data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            $obj = $this->findById($id,FALSE);
            
            if(is_object($obj)){
                if(isset($data['firstName']) && $data['firstName']){
                    $obj->getCustomer()->setFirstName($data['firstName']);
                }
                if(isset($data['lastName']) && $data['lastName']){
                    $obj->getCustomer()->setLastName($data['lastName']);
                }
                if(isset($data['phoneNumber']) && $data['phoneNumber']){
                    $obj->getCustomer()->setPhoneNumber($data['phoneNumber']);
                }
                if(isset($data['color'])){
                    $obj->setColor($data['color']);
                }
                if(isset($data['plate'])){
                    $vehicle = $em->getRepository('AppParking\Entity\Vehicle')
                               ->findOneBy(['plate'=>$data['plate']]);
                    if($id == $vehicle->getId()){
                        $obj->setPlate($data['plate']);
                    }else{
                        throw new Exception("Vehicle already exist");
                    }
                }

                if(isset($data['brand'])){
                    $brand = $em->find('AppParking\Entity\Brand',$data['brand']);
                    $obj->getBrand()->removeVehicle($obj);
                    $brand->addVehicle($obj);
                    $em->persist($brand);
                }

                if(isset($data['vehicleType'])){
                    $type = $em->find('AppParking\Entity\VehicleType',$data['vehicleType']);
                    $obj->getVehicleType()->removeVehicle($obj);
                    $type->addVehicle($obj);
                    $em->persist($type);
                }

                $em->persist($obj);
                $em->flush();
            }
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }
}
