<?php
/*
 *
 * (c) Nicolas Cuevas <nicolasgcuevas@gmail.com>
 *
 */

namespace AppParking\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use AppParking\Entity\User;
use AppParking\Entity\UserGroup;
use AppParking\Repository\Reusable\AttributesTrait;
use Exception;
use DateTime;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    use AttributesTrait;

    public function findById($id, $returnArray = TRUE)
    {   
        $result = NULL;
        $dql = "SELECT u , g  FROM AppParking\Entity\User u ".
               "JOIN u.userGroups g WHERE u.id = '".$id."'";
        try{
            if($returnArray){
                $result = $this->getEntityManager()->createQuery($dql)->getArrayResult();
            }else{
                $result = $this->getEntityManager()->createQuery($dql)->getSingleResult();
            }
            
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function findByOneWithGroup($username)
    {   
        $result = NULL;
        $dql = "SELECT u.id, u.firstName, u.lastName, u.username, u.password, u.active,
                u.lockUser, g.name AS role FROM AppParking\Entity\User u ".
               "JOIN u.userGroups g WHERE u.username = '".$username."'";
        try{
            $result = $this->getEntityManager()->createQuery($dql)->getSingleResult();
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function findAllObjects($queryFilters)
    {   
        $result = NULL;
        $page = $queryFilters['page'];
        $limit = $queryFilters['limit'];
        $where = $queryFilters['where'];
        $orderBy = $queryFilters['orderBy'];

        $qb = $this->getEntityManager()->createQueryBuilder();
        try{
            $qb->select(array('u','g'))
               ->from('AppParking\Entity\User', 'u')
               ->join('u.userGroups', 'g')
               ->add('where','u.active=1');
            $query = $qb->getQuery();

            if($where){
                $qb->add('where','u.'.$where['field']." LIKE '%".$where['value']."%'");
            }

            if($orderBy){
                $qb->add('orderBy','u.'.$orderBy['field'].' '.$orderBy['type']);
            }

            $result['items'] = $query->getArrayResult();
            $pagination = $this->getPagination($query, $page, $limit);
            $result['pagination'] = $pagination;
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function create($data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            if(!isset($data['userGroups'])){
                throw new Exception("userGroups param is missing");
            }
            $group = $em->find('AppParking\Entity\UserGroup',$data['userGroups']);
            $user = new User();
            $user->setFirstName($data['firstName']);
            $user->setLastName($data['lastName']);
            $user->setPhoneNumber($data['phoneNumber']);
            $user->setUsername($data['username']);
            $user->setEmail($data['email']);
            $user->setPassword($data['password']);
            $user->addUserGroup($group);
            $em->persist($user);
            $em->flush();
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function update($id, $data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            $user = $this->findById($id,FALSE);
            if(is_object($user)){
                $group = $em->find('AppParking\Entity\UserGroup',$data['userGroups']);
                if(isset($data['firstName'])){
                    $user->setFirstName($data['firstName']);
                }
                if(isset($data['lastName'])){
                    $user->setLastName($data['lastName']);
                }
                if(isset($data['phoneNumber'])){
                    $user->setPhoneNumber($data['phoneNumber']);
                }
                if(isset($data['username'])){
                    $user->setUsername($data['username']);
                }
                if(isset($data['email'])){
                    $user->setEmail($data['email']);
                }
                if(isset($data['password'])){
                    $user->setPassword($data['password']);
                }
                if(isset($data['active'])){
                    $user->setActive($data['active']);
                }
                if(isset($data['lockUser'])){
                    $user->setLockUser($data['lockUser']);
                }
                if(isset($data['userGroups'])){
                    $group = $em->find('AppParking\Entity\UserGroup', $data['userGroups']);
                    if(!ALLOW_MULTIPLE_USER_GROUPS){
                        foreach ($user->getUserGroups() as $key => $value) {
                            $user->removeUserGroup($value);
                        }
                    }
                    $user->addUserGroup($group);
                }
                $em->persist($user);
                $em->flush();
            }
            
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

}
