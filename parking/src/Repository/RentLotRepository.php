<?php
/*
 *
 * (c) Nicolas Cuevas <nicolasgcuevas@gmail.com>
 *
 */

namespace AppParking\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use AppParking\Entity\RentLot;
use AppParking\Entity\Payment;
use AppParking\Entity\Lot;
use AppParking\Repository\Reusable\AttributesTrait;
use Exception;
use DateTime;

/**
 * RentLotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RentLotRepository extends \Doctrine\ORM\EntityRepository
{
    use AttributesTrait;

    public function findById($id, $returnArray = TRUE)
    {   
        $result = NULL;
        $dql = "SELECT u, p, pt, ps, pc, v, vc, vt, vb, rt, rs, l, s  FROM AppParking\Entity\RentLot u ".
                "JOIN u.payment p ".
                "JOIN p.paymentType pt ".
                "JOIN p.paymentStatus ps ".
                "JOIN p.currency pc ".
                "JOIN u.vehicle v ".
                "JOIN v.customer vc ".
                "JOIN v.vehicleType vt ".
                "JOIN v.brand vb ".
                "JOIN u.rentType rt ".
                "JOIN u.rentStatus rs ".
                "JOIN u.lot l ".
                "JOIN l.section s ".
               "WHERE u.id = '".$id."'";
        try{
            if($returnArray){
                $result = $this->getEntityManager()->createQuery($dql)->getArrayResult();
            }else{
                $result = $this->getEntityManager()->createQuery($dql)->getSingleResult();
            }
            
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function findAllObjects($queryFilters=NULL)
    {   
        $result = NULL;
        $page = isset($queryFilters['page']) ? $queryFilters['page'] : null;
        $limit = isset($queryFilters['limit']) ? $queryFilters['limit'] : null;
        $where = isset($queryFilters['where']) ? $queryFilters['where'] : null;
        $orderBy = isset($queryFilters['orderBy']) ? $queryFilters['orderBy'] : null;

        $qb = $this->getEntityManager()->createQueryBuilder();
        try{
            $qb->select(array('rentlot', 'payment', 'paymentType', 'paymentCurrency', 'paymentStatus','vehicle', 'vehicleCustumer', 'vehicleType', 'vehicleBrand','rentType', 'rentStatus', 'lot', 'lotSection' ))
               ->from('AppParking\Entity\RentLot', 'rentlot')
               ->join('rentlot.payment', 'payment')
               ->join('payment.paymentType', 'paymentType')
               ->join('payment.paymentStatus', 'paymentStatus')
               ->join('payment.currency', 'paymentCurrency')
               ->join('rentlot.rentType', 'rentType')
               ->join('rentlot.rentStatus', 'rentStatus')
               ->join('rentlot.lot', 'lot')
               ->join('lot.section', 'lotSection')
               ->join('rentlot.vehicle', 'vehicle')
               ->join('vehicle.customer', 'vehicleCustumer')
               ->join('vehicle.brand', 'vehicleBrand')
               ->join('vehicle.vehicleType', 'vehicleType')
               ->setFirstResult( ($limit * ($page)) )
               ->setMaxResults( $limit );

            $qb = $this->addFilters($qb, $where, $orderBy);
            
            $query = $qb->getQuery();

            $result['items'] = $query->getArrayResult();

            $pagination = $this->getPagination($query, $page, $limit);
            $result['pagination'] = $pagination;

        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function generateLotsReportData($queryFilters=NULL)
    {   
        $result = NULL;
        $where = isset($queryFilters['where']) ? $queryFilters['where'] : null;
        $orderBy = isset($queryFilters['orderBy']) ? $queryFilters['orderBy'] : null;
        
        $qb = $this->getEntityManager()->createQueryBuilder();
        try{
            $qb->select(array(
                'rentlot', 'payment', 'paymentType','paymentCurrency','paymentStatus',
                'vehicle', 'vehicleCustumer', 'vehicleType', 'vehicleBrand','rentType',
                'rentStatus', 'lot', 'lotSection', 'COUNT(lot.id) as total_rented' ))
               ->from('AppParking\Entity\RentLot', 'rentlot')
               ->join('rentlot.payment', 'payment')
               ->join('payment.paymentType', 'paymentType')
               ->join('payment.paymentStatus', 'paymentStatus')
               ->join('payment.currency', 'paymentCurrency')
               ->join('rentlot.rentType', 'rentType')
               ->join('rentlot.rentStatus', 'rentStatus')
               ->join('rentlot.lot', 'lot')
               ->join('lot.section', 'lotSection')
               ->join('rentlot.vehicle', 'vehicle')
               ->join('vehicle.customer', 'vehicleCustumer')
               ->join('vehicle.brand', 'vehicleBrand')
               ->join('vehicle.vehicleType', 'vehicleType')
               ->groupBy('lot.id');

            $qb = $this->addFilters($qb, $where, $orderBy);
            
            $query = $qb->getQuery();
            
            $items = $query->getArrayResult();
            
            $getLots = function($list){
               foreach ($list as $value) {
                return [
                "lot"=>$value['lot'],
                "total_rented"=>$list['total_rented']
                ];
               }
            };

            $getLotsIds = function($list){
               foreach ($list as $value) {
                   if(isset($value['lot'])){
                       return $value['lot']['id'];
                   }
               }
            };

            $lotsIds = array_map($getLotsIds, $items);
            $lots = NULL;
            if($lotsIds){
                $qbLots = $this->getEntityManager()->createQueryBuilder();
                $qbLots->select(array('l', 'ls'))
                ->from('AppParking\Entity\Lot', 'l')
                ->join('l.section', 'ls')
                ->where($qbLots->expr()->notIn('l.id',$lotsIds));

                $query = $qbLots->getQuery();
                $lots = $query->getArrayResult();
            }
            

            $result['items'] = $items ? array_map($getLots, $items) : NULL;
            $result['unused_lots'] = $lots;

        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function generateBillingReportData($queryFilters=NULL)
    {   
        $result = NULL;
        $where = isset($queryFilters['where']) ? $queryFilters['where'] : null;
        $orderBy = isset($queryFilters['orderBy']) ? $queryFilters['orderBy'] : null;
        
        $qb = $this->getEntityManager()->createQueryBuilder();
        try{
            $qb->select(array(
                'rentlot', 'payment', 'paymentType','paymentCurrency',
                'paymentStatus', 'vehicle', 'vehicleCustumer', 'vehicleType',
                'vehicleBrand', 'rentType', 'rentStatus', 'lot', 'lotSection',
                'COUNT(vehicle) as rent_times', 'SUM(payment.amount) as total_amount'))
               ->from('AppParking\Entity\RentLot', 'rentlot')
               ->join('rentlot.payment', 'payment')
               ->join('payment.paymentType', 'paymentType')
               ->join('payment.paymentStatus', 'paymentStatus')
               ->join('payment.currency', 'paymentCurrency')
               ->join('rentlot.rentType', 'rentType')
               ->join('rentlot.rentStatus', 'rentStatus')
               ->join('rentlot.lot', 'lot')
               ->join('lot.section', 'lotSection')
               ->join('rentlot.vehicle', 'vehicle')
               ->join('vehicle.customer', 'vehicleCustumer')
               ->join('vehicle.brand', 'vehicleBrand')
               ->join('vehicle.vehicleType', 'vehicleType')
               ->groupBy('vehicle.id');

            $qb = $this->addFilters($qb, $where, $orderBy);
            
            $query = $qb->getQuery();
            
            $items = $query->getArrayResult();
            
            $getLots = function($list){
               foreach ($list as $value) {
                return [
                "vehicle"=>$value['vehicle'],
                "rent_times"=>$list['rent_times'],
                "total_amount"=>$list['total_amount']
                ];
               }
            };

            $result['total_vehicles'] = null;
            $result['total_vehicles_amount'] = null;
            $items = $items ? array_map($getLots, $items) : NULL;
            if($items){
                foreach ($items as $value) {
                    $result['total_vehicles'] += $value["rent_times"];
                    $result['total_vehicles_amount'] += $value["total_amount"];
                }
            }
            
            $result['items'] = $items;
            $result['total_vehicles_distinct'] = count($items);
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function generateAverageReportData($queryFilters=NULL)
    {   
        $result = NULL;
        $where = isset($queryFilters['where']) ? $queryFilters['where'] : null;
        $orderBy = isset($queryFilters['orderBy']) ? $queryFilters['orderBy'] : null;
        
        $qbAmount = $this->getEntityManager()->createQueryBuilder();
        $qbVehicle = $this->getEntityManager()->createQueryBuilder();
        $qbLot = $this->getEntityManager()->createQueryBuilder();

        try{

            $qbAmount->select(array('AVG(payment.amount) as total_amount_average'))
               ->from('AppParking\Entity\RentLot', 'rentlot')
               ->join('rentlot.payment', 'payment');
            $qbAmount = $this->addFilters($qbAmount, $where, $orderBy);

            $qbVehicle->select(array(
                'rentlot', 'payment','AVG(payment.amount) as amount_average', 
                'vehicle', 'vehicleCustumer', 'vehicleType',
                'vehicleBrand', 'rentType', 'rentStatus'))
               ->from('AppParking\Entity\RentLot', 'rentlot')
               ->join('rentlot.payment', 'payment')
               ->join('rentlot.rentType', 'rentType')
               ->join('rentlot.rentStatus', 'rentStatus')
               ->join('rentlot.vehicle', 'vehicle')
               ->join('vehicle.customer', 'vehicleCustumer')
               ->join('vehicle.brand', 'vehicleBrand')
               ->join('vehicle.vehicleType', 'vehicleType')
               ->groupBy('vehicle.id');
            $qbVehicle = $this->addFilters($qbVehicle, $where, $orderBy);

            $qbLot->select(array(
                'rentlot', 'payment','AVG(payment.amount) as amount_average'
                ,'lot', 'lotSection',))
               ->from('AppParking\Entity\RentLot', 'rentlot')
               ->join('rentlot.payment', 'payment')
               ->join('rentlot.lot', 'lot')
               ->join('lot.section', 'lotSection')
               ->groupBy('lot.id');
            $qbLot = $this->addFilters($qbLot, $where, $orderBy);


            $queryAmount = $qbAmount->getQuery();            
            $amountAvg = $queryAmount->getArrayResult();

            $queryVehicle = $qbVehicle->getQuery();            
            $vehicleAvg = $queryVehicle->getArrayResult();

            $queryLot = $qbLot->getQuery();            
            $lotAvg = $queryLot->getArrayResult();
            
            $getVehicles = function($list){
               foreach ($list as $value) {
                return [
                "vehicle"=>$value['vehicle'],
                "amount_average"=>$list['amount_average']
                ];
               }
            };

            $getLots = function($list){
               foreach ($list as $value) {
                return [
                "lot"=>$value['lot'],
                "amount_average"=>$list['amount_average']
                ];
               }
            };

            $result['lots'] = $lotAvg ? array_map($getLots, $lotAvg) : NULL;
            $result['vehicles'] = $vehicleAvg ? array_map($getVehicles, $vehicleAvg) : NULL;
            $result['total_amount_average'] = $amountAvg ? $amountAvg[0]['total_amount_average'] : NULL;
        }catch(NoResultException $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function create($data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            $rentLot = new RentLot();
            $payment = new Payment();

            $vehicle = $em->find('AppParking\Entity\Vehicle', $data['vehicle']);
            $customer = $em->find(
                'AppParking\Entity\Customer',
                $vehicle->getCustomer()->getId());
            
            $rentType = $em->find('AppParking\Entity\RentType', $data['rentType']);
            $rentStatus = $em->find('AppParking\Entity\RentStatus',1);

            $lot = $em->find('AppParking\Entity\Lot', $data['lot']);

            /// todo : change harcoded ///
            $paymentType = $em->find('AppParking\Entity\PaymentType', 3);
            $paymentStatus = $em->find('AppParking\Entity\PaymentStatus', 1);
            $currency = $em->find('AppParking\Entity\Currency', 1);

            
            if($lot->getAvailable()){
                //persist rentlot
                $rentLot->setVehicle($vehicle);
                $em->persist($rentLot);

                $rentType->addRentLot($rentLot);
                $em->persist($rentType);

                $rentStatus->addRentLot($rentLot);
                $em->persist($rentStatus);

                $lot->addRentLot($rentLot);
                $lot->setAvailable(false);
                $em->persist($lot);

                //persist payment
                $payment->setAmount(0);
                $payment->setCustomer($customer);
                $payment->addRentLot($rentLot);
                $em->persist($payment);

                $paymentType->addPayment($payment);
                $em->persist($paymentType);

                $paymentStatus->addPayment($payment);
                $em->persist($paymentStatus);

                $currency->addPayment($payment);
                $em->persist($currency);

                $em->flush();
            }else{
               throw new Exception("lot is not available");
            }
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }

    public function update($id, $data)
    {   
        $result = NULL;
        $em = $this->getEntityManager();
        try{
            $obj = $this->findById($id,FALSE);
            if(is_object($obj)){
                // set endtime when status change to paid and remove harcoded code
                if(isset($data['rentStatus'])){
                    $rentStatus = $em->find('AppParking\Entity\RentStatus', $data['rentStatus']);
                    $obj->getRentStatus()->removeRentLot($obj);
                    $rentStatus->addRentLot($obj);
                    $em->persist($obj);
                    $em->persist($rentStatus);
                }

                if(isset($data['paymentStatus'])){
                    $paymentStatus = $em->find('AppParking\Entity\PaymentStatus', $data['paymentStatus']);
                    $obj->getPayment()->getPaymentStatus()->removePayment($obj->getPayment());
                    $paymentStatus->addPayment($obj->getPayment());
                    $em->persist($obj);
                    $em->persist($paymentStatus);
                }

                if(isset($data['amount'])){
                    $obj->getPayment()->setAmount($data['amount']);
                    $em->persist($obj);
                }

                if(isset($data['lot'])){
                    if(isset($data['lot']) && isset($data['lot']['available'])){
                        $obj->getLot()->setAvailable($data['lot']['available']);
                        $em->persist($obj);
                    }
                }

                if(isset($data['endTime'])){
                    $obj->setEndTime(new DateTime($data['endTime']));
                }
                
                $em->flush();
            }
        }catch(Exception $e){
            $result = ['error'=>$e->getMessage()];
        }

        return $result;
    }
}
